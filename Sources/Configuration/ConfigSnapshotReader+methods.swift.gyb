//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftConfiguration open source project
//
// Copyright (c) 2025 Apple Inc. and the SwiftConfiguration project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftConfiguration project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import *
}%
${autogenerated_warning()}
@available(Configuration 1.0, *)
extension ConfigSnapshotReader {

    // MARK: - Get

    % for primitive_type in primitive_types:
    /// Synchronously gets a config value for the given config key.
    ///
    /// Use this method to retrieve optional configuration values from a snapshot.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let port = snapshot.int(forKey: ["server", "port"])
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The value converted to the expected type if found and convertible, otherwise `nil`.
    public func ${primitive_type["lowercase_name"]}(
        forKey key: ConfigKey,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> ${primitive_type["type"]}? {
        value(
            forKey: key,
            type: .${lower_first(primitive_type["name"])},
            isSecret: isSecret,
            unwrap: { try $0.as${primitive_type["name"]} },
            wrap: ConfigContent.${lower_first(primitive_type["name"])},
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given string key.
    ///
    /// Use this method to retrieve optional configuration values using string-based keys.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let dbUrl = snapshot.string(forKey: "database.url")
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The value converted to the expected type if found and convertible, otherwise `nil`.
    public func ${primitive_type["lowercase_name"]}(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> ${primitive_type["type"]}? {
        ${primitive_type["lowercase_name"]}(
            forKey: keyDecoder.decode(key, context: context),
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given config key, with a default fallback.
    ///
    /// Use this method when you need a guaranteed non-nil result. If the configuration
    /// value is missing or can't be converted to the expected type, the default value
    /// is returned instead.
    ///
    /// ```swift
    /// let maxRetries = snapshot.int(forKey: ["network", "maxRetries"], default: 3)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback value returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value if found and convertible, otherwise the default value.
    public func ${primitive_type["lowercase_name"]}(
        forKey key: ConfigKey,
        isSecret: Bool = false,
        default defaultValue: ${primitive_type["type"]},
        fileID: String = #fileID,
        line: UInt = #line
    ) -> ${primitive_type["type"]} {
        value(
            forKey: key,
            type: .${lower_first(primitive_type["name"])},
            isSecret: isSecret,
            default: defaultValue,
            unwrap: { try $0.as${primitive_type["name"]} },
            wrap: ConfigContent.${lower_first(primitive_type["name"])},
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given config key, providing a default fallback.
    ///
    /// Use this method when you need a guaranteed non-nil result. If the configuration
    /// value is missing or can't be converted to the expected type, the default value
    /// is returned instead.
    ///
    /// ```swift
    /// let limit = snapshot.int(forKey: "api.rateLimit", default: 1000)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback value returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value if found and convertible, otherwise the default value.
    public func ${primitive_type["lowercase_name"]}(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        isSecret: Bool = false,
        default defaultValue: ${primitive_type["type"]},
        fileID: String = #fileID,
        line: UInt = #line
    ) -> ${primitive_type["type"]} {
        ${primitive_type["lowercase_name"]}(
            forKey: keyDecoder.decode(key, context: context),
            isSecret: isSecret,
            default: defaultValue,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required config value for the given config key, throwing an error if it's missing.
    ///
    /// Use this method when a configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let apiKey = try snapshot.requiredString(forKey: ["api", "key"], isSecret: true)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func required${primitive_type["name"]}(
        forKey key: ConfigKey,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> ${primitive_type["type"]} {
        try requiredValue(
            forKey: key,
            type: .${lower_first(primitive_type["name"])},
            isSecret: isSecret,
            unwrap: { try $0.as${primitive_type["name"]} },
            wrap: ConfigContent.${lower_first(primitive_type["name"])},
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required config value for the given string key, throwing an error if it's missing.
    ///
    /// Use this method when a configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let endpoint = try snapshot.requiredString(forKey: "service.endpoint")
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func required${primitive_type["name"]}(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> ${primitive_type["type"]} {
        try required${primitive_type["name"]}(
            forKey: keyDecoder.decode(key, context: context),
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    % end
    % for string_convertible_type in string_convertible_types:
    /// Synchronously gets a config value for the given config key, converting from string.
    ///
    /// Use this method to retrieve configuration values that can be converted from strings,
    /// such as custom types conforming to string conversion protocols.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let serverMode = snapshot.string(forKey: ["server", "mode"], as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The value converted to the expected type if found and convertible, otherwise `nil`.
    public func string<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> Value? {
        value(
            forKey: key,
            type: .string,
            isSecret: isSecret,
            unwrap: { try cast($0.asString, type: Value.self, key: key) },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given string key, converting from string.
    ///
    /// Use this method to retrieve configuration values that can be converted from strings.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let serverMode = snapshot.string(forKey: "server.mode", as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The value converted to the expected type if found and convertible, otherwise `nil`.
    public func string<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> Value? {
        string(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given config key with default fallback, converting from string.
    ///
    /// Use this method when you need a guaranteed non-nil result for string-convertible types.
    /// If the configuration value is missing or can't be converted to the expected type,
    /// the default value is returned instead.
    ///
    /// ```swift
    /// let serverMode = snapshot.string(forKey: ["server", "mode"], as: ServerMode.self, default: .production)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback value returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value if found and convertible, otherwise the default value.
    public func string<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        default defaultValue: Value,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> Value {
        value(
            forKey: key,
            type: .string,
            isSecret: isSecret,
            default: defaultValue,
            unwrap: { try cast($0.asString, type: Value.self, key: key) },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a config value for the given string key with default fallback, converting from string.
    ///
    /// Use this method when you need a guaranteed non-nil result for string-convertible types.
    /// If the configuration value is missing or can't be converted to the expected type,
    /// the default value is returned instead.
    ///
    /// ```swift
    /// let logLevel = snapshot.string(forKey: "logging.level", as: LogLevel.self, default: .info)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback value returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value if found and convertible, otherwise the default value.
    public func string<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        default defaultValue: Value,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> Value {
        string(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            default: defaultValue,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required config value for the given config key, converting from string.
    ///
    /// Use this method when a string-convertible configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let serverMode = try snapshot.requiredString(forKey: ["server", "mode"], as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func requiredString<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> Value {
        try requiredValue(
            forKey: key,
            type: .string,
            isSecret: isSecret,
            unwrap: { try cast($0.asString, type: Value.self, key: key) },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required config value for the given string key, converting from string.
    ///
    /// Use this method when a string-convertible configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let logLevel = try snapshot.requiredString(forKey: "logging.level", as: LogLevel.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The type to convert the string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config value converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func requiredString<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> Value {
        try requiredString(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets an array of config values for the given config key, converting from strings.
    ///
    /// Use this method to retrieve configuration arrays where each element can be converted from strings.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let serverModes = snapshot.stringArray(forKey: ["server", "allowedModes"], as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: An array of values converted to the expected type if found and convertible, otherwise `nil`.
    public func stringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> [Value]? {
        value(
            forKey: key,
            type: .stringArray,
            isSecret: isSecret,
            unwrap: { try $0.asStringArray.map { try cast($0, type: Value.self, key: key) } },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets an array of config values for the given string key, converting from strings.
    ///
    /// Use this method to retrieve configuration arrays where each element can be converted from strings.
    /// If the value doesn't exist or can't be converted to the expected type, the method returns `nil`.
    ///
    /// ```swift
    /// let serverModes = snapshot.stringArray(forKey: "server.allowedModes", as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: An array of values converted to the expected type if found and convertible, otherwise `nil`.
    public func stringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) -> [Value]? {
        stringArray(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets an array of config values for the given config key with default fallback, converting from strings.
    ///
    /// Use this method when you need a guaranteed non-nil result for string-convertible array types.
    /// If the configuration value is missing or can't be converted to the expected type,
    /// the default value is returned instead.
    ///
    /// ```swift
    /// let serverModes = snapshot.stringArray(forKey: ["server", "allowedModes"], as: ServerMode.self, default: [.production])
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback array returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config array if found and convertible, otherwise the default array.
    public func stringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        default defaultValue: [Value],
        fileID: String = #fileID,
        line: UInt = #line
    ) -> [Value] {
        value(
            forKey: key,
            type: .stringArray,
            isSecret: isSecret,
            default: defaultValue,
            unwrap: { try $0.asStringArray.map { try cast($0, type: Value.self, key: key) } },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets an array of config values for the given string key with default fallback, converting from strings.
    ///
    /// Use this method when you need a guaranteed non-nil result for string-convertible array types.
    /// If the configuration value is missing or can't be converted to the expected type,
    /// the default value is returned instead.
    ///
    /// ```swift
    /// let logLevels = snapshot.stringArray(forKey: "logging.enabledLevels", as: LogLevel.self, default: [.info])
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - defaultValue: The fallback array returned when the config value is missing or invalid.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config array if found and convertible, otherwise the default array.
    public func stringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        default defaultValue: [Value],
        fileID: String = #fileID,
        line: UInt = #line
    ) -> [Value] {
        stringArray(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            default: defaultValue,
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required array of config values for the given config key, converting from strings.
    ///
    /// Use this method when a string-convertible array configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let requiredModes = try snapshot.requiredStringArray(forKey: ["server", "allowedModes"], as: ServerMode.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The config key to look up.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config array converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func requiredStringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: ConfigKey,
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> [Value] {
        try requiredValue(
            forKey: key,
            type: .stringArray,
            isSecret: isSecret,
            unwrap: { try $0.asStringArray.map { try cast($0, type: Value.self, key: key) } },
            wrap: { uncast($0) },
            fileID: fileID,
            line: line
        )
    }

    /// Synchronously gets a required array of config values for the given string key, converting from strings.
    ///
    /// Use this method when a string-convertible array configuration value is mandatory for your application to function.
    /// The method throws an error if the value is missing or can't be converted to the expected type.
    ///
    /// ```swift
    /// let requiredLevels = try snapshot.requiredStringArray(forKey: "logging.enabledLevels", as: LogLevel.self)
    /// ```
    ///
    /// - Parameters:
    ///   - key: The string representation of the config key to look up.
    ///   - context: Additional context used for key resolution.
    ///   - type: The element type to convert each string value to.
    ///   - isSecret: Whether the value should be treated as secret for logging and debugging purposes.
    ///   - fileID: The file ID where this call originates. Used for access reporting.
    ///   - line: The line number where this call originates. Used for access reporting.
    /// - Returns: The config array converted to the expected type.
    /// - Throws: If the value is missing, or a conversion error if the value can't be converted to the expected type.
    public func requiredStringArray<Value: ${string_convertible_type["protocol"]}>(
        forKey key: String,
        context: [String: ConfigContextValue] = [:],
        as type: Value.Type = Value.self,
        isSecret: Bool = false,
        fileID: String = #fileID,
        line: UInt = #line
    ) throws -> [Value] {
        try requiredStringArray(
            forKey: keyDecoder.decode(key, context: context),
            as: type,
            isSecret: isSecret,
            fileID: fileID,
            line: line
        )
    }

    % end
}
