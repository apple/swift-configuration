//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftConfiguration open source project
//
// Copyright (c) 2025 Apple Inc. and the SwiftConfiguration project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftConfiguration project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import *
}%
${autogenerated_warning()}

import Testing
@testable import Configuration
import ConfigurationTestingInternal

struct ConfigSnapshotReaderMethodTestsGet1 {
    
    typealias Defaults = ConfigReaderTests.Defaults
    typealias TestEnum = ConfigReaderTests.TestEnum
    typealias TestStringConvertible = ConfigReaderTests.TestStringConvertible

    @available(Configuration 1.0, *)
    @Test func get() async throws {
        let config = ConfigReaderTests.config

        % for primitive_type in primitive_types:
        % name = primitive_type["name"]
        % lower_name = lower_first(name)
        try config.withSnapshot { snapshot in
            // Optional - success
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["${lower_name}"])) == Defaults.${lower_name})
            #expect(snapshot.${lower_name}(forKey: "${lower_name}") == Defaults.${lower_name})

            // Optional - missing
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["absent${name}"])) == nil)
            #expect(snapshot.${lower_name}(forKey: "absent${name}") == nil)

            // Optional - failing
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["failure"])) == nil)
            #expect(snapshot.${lower_name}(forKey: "failure") == nil)

            // Defaulted - success
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["${lower_name}"]), default: Defaults.other${name}) == Defaults.${lower_name})
            #expect(snapshot.${lower_name}(forKey: "${lower_name}", default: Defaults.other${name}) == Defaults.${lower_name})

            // Defaulted - missing
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["absent${name}"]), default: Defaults.other${name}) == Defaults.other${name})
            #expect(snapshot.${lower_name}(forKey: "absent${name}", default: Defaults.other${name}) == Defaults.other${name})

            // Defaulted - failing
            #expect(snapshot.${lower_name}(forKey: ConfigKey(["failure"]), default: Defaults.other${name}) == Defaults.other${name})
            #expect(snapshot.${lower_name}(forKey: "failure", default: Defaults.other${name}) == Defaults.other${name})

            // Required - success
            try #expect(snapshot.required${name}(forKey: ConfigKey(["${lower_name}"])) == Defaults.${lower_name})
            try #expect(snapshot.required${name}(forKey: "${lower_name}") == Defaults.${lower_name})

            // Required - missing
            let error1 = #expect(throws: ConfigError.self) { try snapshot.required${name}(forKey: ConfigKey(["absent${name}"])) }
            #expect(error1 == .missingRequiredConfigValue(AbsoluteConfigKey(["absent${name}"])))
            let error2 = #expect(throws: ConfigError.self) { try snapshot.required${name}(forKey: "absent${name}") }
            #expect(error2 == .missingRequiredConfigValue(AbsoluteConfigKey(["absent${name}"])))

            // Required - failing
            #expect(throws: TestProvider.TestError.self) { try snapshot.required${name}(forKey: ConfigKey(["failure"])) }
            #expect(throws: TestProvider.TestError.self) { try snapshot.required${name}(forKey: "failure") }
        }
        % end
    }
}
