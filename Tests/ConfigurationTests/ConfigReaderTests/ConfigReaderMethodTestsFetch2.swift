//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftConfiguration open source project
//
// Copyright (c) 2025 Apple Inc. and the SwiftConfiguration project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftConfiguration project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// #############################################################################
// #                                                                           #
// #            DO NOT EDIT THIS FILE; IT IS AUTOGENERATED.                    #
// #                                                                           #
// #############################################################################

import Testing
@testable import Configuration
import ConfigurationTestingInternal

struct ConfigReaderMethodTestsFetch2 {

    typealias Defaults = ConfigReaderTests.Defaults
    typealias TestEnum = ConfigReaderTests.TestEnum
    typealias TestStringConvertible = ConfigReaderTests.TestStringConvertible

    @available(Configuration 1.0, *)
    @Test func fetch() async throws {
        let config = ConfigReaderTests.config

        do {
            // Optional - success
            #expect(
                try await config.fetchString(forKey: ConfigKey(["stringConvertible"]), as: TestStringConvertible.self)
                    == Defaults.stringConvertible
            )
            #expect(
                try await config.fetchString(forKey: "stringConvertible", as: TestStringConvertible.self)
                    == Defaults.stringConvertible
            )

            // Optional - missing
            #expect(
                try await config.fetchString(
                    forKey: ConfigKey(["absentStringConvertible"]),
                    as: TestStringConvertible.self
                ) == nil
            )
            #expect(
                try await config.fetchString(forKey: "absentStringConvertible", as: TestStringConvertible.self) == nil
            )

            // Optional - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(forKey: ConfigKey(["failure"]), as: TestStringConvertible.self)
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(forKey: "failure", as: TestStringConvertible.self)
            }

            // Defaulted - success
            #expect(
                try await config.fetchString(
                    forKey: ConfigKey(["stringConvertible"]),
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                ) == Defaults.stringConvertible
            )
            #expect(
                try await config.fetchString(
                    forKey: "stringConvertible",
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                ) == Defaults.stringConvertible
            )

            // Defaulted - missing
            #expect(
                try await config.fetchString(
                    forKey: ConfigKey(["absentStringConvertible"]),
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                ) == Defaults.otherStringConvertible
            )
            #expect(
                try await config.fetchString(
                    forKey: "absentStringConvertible",
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                ) == Defaults.otherStringConvertible
            )

            // Defaulted - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(
                    forKey: ConfigKey(["failure"]),
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                )
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(
                    forKey: "failure",
                    as: TestStringConvertible.self,
                    default: Defaults.otherStringConvertible
                )
            }

            // Required - success
            #expect(
                try await config.fetchRequiredString(
                    forKey: ConfigKey(["stringConvertible"]),
                    as: TestStringConvertible.self
                ) == Defaults.stringConvertible
            )
            #expect(
                try await config.fetchRequiredString(forKey: "stringConvertible", as: TestStringConvertible.self)
                    == Defaults.stringConvertible
            )

            // Required - missing
            let error1 = await #expect(throws: ConfigError.self) {
                try await config.fetchRequiredString(
                    forKey: ConfigKey(["absentStringConvertible"]),
                    as: TestStringConvertible.self
                )
            }
            #expect(error1 == .missingRequiredConfigValue(AbsoluteConfigKey(["absentStringConvertible"])))
            let error2 = await #expect(throws: ConfigError.self) {
                try await config.fetchRequiredString(forKey: "absentStringConvertible", as: TestStringConvertible.self)
            }
            #expect(error2 == .missingRequiredConfigValue(AbsoluteConfigKey(["absentStringConvertible"])))

            // Required - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchRequiredString(forKey: ConfigKey(["failure"]), as: TestStringConvertible.self)
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchRequiredString(forKey: "failure", as: TestStringConvertible.self)
            }
        }
        do {
            // Optional - success
            #expect(
                try await config.fetchString(forKey: ConfigKey(["stringEnum"]), as: TestEnum.self)
                    == Defaults.stringEnum
            )
            #expect(try await config.fetchString(forKey: "stringEnum", as: TestEnum.self) == Defaults.stringEnum)

            // Optional - missing
            #expect(try await config.fetchString(forKey: ConfigKey(["absentStringEnum"]), as: TestEnum.self) == nil)
            #expect(try await config.fetchString(forKey: "absentStringEnum", as: TestEnum.self) == nil)

            // Optional - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(forKey: ConfigKey(["failure"]), as: TestEnum.self)
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(forKey: "failure", as: TestEnum.self)
            }

            // Defaulted - success
            #expect(
                try await config.fetchString(
                    forKey: ConfigKey(["stringEnum"]),
                    as: TestEnum.self,
                    default: Defaults.otherStringEnum
                ) == Defaults.stringEnum
            )
            #expect(
                try await config.fetchString(forKey: "stringEnum", as: TestEnum.self, default: Defaults.otherStringEnum)
                    == Defaults.stringEnum
            )

            // Defaulted - missing
            #expect(
                try await config.fetchString(
                    forKey: ConfigKey(["absentStringEnum"]),
                    as: TestEnum.self,
                    default: Defaults.otherStringEnum
                ) == Defaults.otherStringEnum
            )
            #expect(
                try await config.fetchString(
                    forKey: "absentStringEnum",
                    as: TestEnum.self,
                    default: Defaults.otherStringEnum
                ) == Defaults.otherStringEnum
            )

            // Defaulted - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(
                    forKey: ConfigKey(["failure"]),
                    as: TestEnum.self,
                    default: Defaults.otherStringEnum
                )
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchString(forKey: "failure", as: TestEnum.self, default: Defaults.otherStringEnum)
            }

            // Required - success
            #expect(
                try await config.fetchRequiredString(forKey: ConfigKey(["stringEnum"]), as: TestEnum.self)
                    == Defaults.stringEnum
            )
            #expect(
                try await config.fetchRequiredString(forKey: "stringEnum", as: TestEnum.self) == Defaults.stringEnum
            )

            // Required - missing
            let error1 = await #expect(throws: ConfigError.self) {
                try await config.fetchRequiredString(forKey: ConfigKey(["absentStringEnum"]), as: TestEnum.self)
            }
            #expect(error1 == .missingRequiredConfigValue(AbsoluteConfigKey(["absentStringEnum"])))
            let error2 = await #expect(throws: ConfigError.self) {
                try await config.fetchRequiredString(forKey: "absentStringEnum", as: TestEnum.self)
            }
            #expect(error2 == .missingRequiredConfigValue(AbsoluteConfigKey(["absentStringEnum"])))

            // Required - failing
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchRequiredString(forKey: ConfigKey(["failure"]), as: TestEnum.self)
            }
            await #expect(throws: TestProvider.TestError.self) {
                try await config.fetchRequiredString(forKey: "failure", as: TestEnum.self)
            }
        }
    }
}
