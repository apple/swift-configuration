//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftConfiguration open source project
//
// Copyright (c) 2025 Apple Inc. and the SwiftConfiguration project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftConfiguration project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// License header will go hereforKey: 
%{
  from gyb_utils import *
}%
${autogenerated_warning()}
import Testing
@testable import Configuration
import ConfigurationTestingInternal

struct ConfigReaderMethodTestsWatch1 {
    
    typealias Defaults = ConfigReaderTests.Defaults
    typealias TestEnum = ConfigReaderTests.TestEnum
    typealias TestStringConvertible = ConfigReaderTests.TestStringConvertible

    @available(Configuration 1.0, *)
    @Test func watch() async throws {
        let config = ConfigReaderTests.config
        
        % for primitive_type in primitive_types:
        % name = primitive_type["name"]
        % lower_name = lower_first(name)
        do {
            // Optional - success
            #expect(try await config.watch${name}(forKey: ConfigKey(["${lower_name}"]), updatesHandler: awaitFirst) == Defaults.${lower_name})
            #expect(try await config.watch${name}(forKey: "${lower_name}", updatesHandler: awaitFirst) == Defaults.${lower_name})

            // Optional - missing
            #expect(try await config.watch${name}(forKey: ConfigKey(["absent${name}"]), updatesHandler: awaitFirst) == .some(nil))
            #expect(try await config.watch${name}(forKey: "absent${name}", updatesHandler: awaitFirst) == .some(nil))

            // Optional - failing
            #expect(try await config.watch${name}(forKey: ConfigKey(["failure"]), updatesHandler: awaitFirst) == .some(nil))
            #expect(try await config.watch${name}(forKey: "failure", updatesHandler: awaitFirst) == .some(nil))

            // Defaulted - success
            #expect(try await config.watch${name}(forKey: ConfigKey(["${lower_name}"]), default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.${lower_name})
            #expect(try await config.watch${name}(forKey: "${lower_name}", default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.${lower_name})

            // Defaulted - missing
            #expect(try await config.watch${name}(forKey: ConfigKey(["absent${name}"]), default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.other${name})
            #expect(try await config.watch${name}(forKey: "absent${name}", default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.other${name})

            // Defaulted - failing
            #expect(try await config.watch${name}(forKey: ConfigKey(["failure"]), default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.other${name})
            #expect(try await config.watch${name}(forKey: "failure", default: Defaults.other${name}, updatesHandler: awaitFirst) == Defaults.other${name})

            // Required - success
            #expect(try await config.watchRequired${name}(forKey: ConfigKey(["${lower_name}"]), updatesHandler: awaitFirst) == Defaults.${lower_name})
            #expect(try await config.watchRequired${name}(forKey: "${lower_name}", updatesHandler: awaitFirst) == Defaults.${lower_name})

            // Required - missing
            let error1 = await #expect(throws: ConfigError.self) { try await config.watchRequired${name}(forKey: ConfigKey(["absent${name}"]), updatesHandler: awaitFirst) }
            #expect(error1 == .missingRequiredConfigValue(AbsoluteConfigKey(["absent${name}"])))
            let error2 = await #expect(throws: ConfigError.self) { try await config.watchRequired${name}(forKey: "absent${name}", updatesHandler: awaitFirst) }
            #expect(error2 == .missingRequiredConfigValue(AbsoluteConfigKey(["absent${name}"])))

            // Required - failing
            await #expect(throws: TestProvider.TestError.self) { try await config.watchRequired${name}(forKey: ConfigKey(["failure"]), updatesHandler: awaitFirst) }
            await #expect(throws: TestProvider.TestError.self) { try await config.watchRequired${name}(forKey: "failure", updatesHandler: awaitFirst) }
        }
        % end
    }
}
